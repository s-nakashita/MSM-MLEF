      program test_cubic_cell
!
! ========== save 1 ======
!
      implicit none
!  
      integer, parameter :: leni=32,leno=32
      real          massi(0:leni+1),masso(leno)
      real          loci(leni+1),hh(leni),vali(leni+1),slpi(leni+1)
      real          loco(leno+1),valo(leno+1)
      real          dqmono(leni+1),dqi,dqimax,dqimin,qilc,qimp,qmax,qmin
      real          chk0,chk1,chk2,chk3,alpha,betta,tau
      real          aa,bb,t,tt,ttt,qq,hhp2,hhm2
      logical       tf
      integer       i,k,rc
      real          dx,masssum,chk0sum
      real*4        dx1,dx2,dy1,dy2,vx0,vx1,vx2,vy1,vy2
      real*4        x1,x2,x3,x4,y1,y2,y3,y4
      real*4        xx(leno+1),yy(leno+1)
      character*2   chr
!
      call opngks
!
      dx = 1./leni
      do i=1,leni+1
       loci(i) = (i-1)*dx
      enddo
! integral mean value(k) between loci(k) and loci(k+1)
      k=1
      if( k.eq.1 ) then
      massi(01) = 3.0
      massi(02) = 1.8
      massi(03) = 2.5
      massi(04) = 2.5
      massi(05) = 3.0
      massi(06) = 2.5
      massi(07) = 1.8
      massi(08) = 1.5
      massi(09) = 1.4
      massi(10) = 1.1
      massi(11) = 3.0
      massi(12) = 1.8
      massi(13) = 2.5
      massi(14) = 2.5
      massi(15) = 3.0
      massi(16) = 2.5
      massi(17) = 1.8
      massi(18) = 1.5
      massi(19) = 1.4
      massi(20) = 1.1
      massi(21) = 3.0
      massi(22) = 1.8
      massi(23) = 2.5
      massi(24) = 2.5
      massi(25) = 3.0
      massi(26) = 2.5
      massi(27) = 1.8
      massi(28) = 1.5
      massi(29) = 1.4
      massi(30) = 1.1
      massi(31) = 3.0
      massi(32) = 1.8
      endif
!
      if(k.eq.2) then
      massi(01) = 300.0
      massi(02) = 299.0
      massi(03) = 298.0
      massi(04) = 297.0
      massi(05) = 296.0
      massi(06) = 295.0
      massi(07) = 294.0
      massi(08) = 293.0
      massi(09) = 292.0
      massi(10) = 291.0
      massi(11) = 290.0
      massi(12) = 291.0
      massi(13) = 292.0
      massi(14) = 293.0
      massi(15) = 294.0
      massi(16) = 295.0
      massi(17) = 296.0
      massi(18) = 297.0
      massi(19) = 298.0
      massi(20) = 299.0
      massi(21) = 299.0
      massi(22) = 298.0
      massi(23) = 296.0
      massi(24) = 294.0
      massi(25) = 292.0
      massi(26) = 290.0
      massi(27) = 288.0
      massi(28) = 286.0
      massi(29) = 284.0
      massi(30) = 282.0
      massi(31) = 280.0
      massi(32) = 278.0
      endif
!
      if(k.eq.3) then
      massi(01) = 0.0
      massi(02) = 1.0
      massi(03) = 3.0
      massi(04) = 5.0
      massi(05) = 7.0
      massi(06) = 6.0
      massi(07) = 5.0
      massi(08) = 4.0
      massi(09) = 3.0
      massi(10) = 2.0
      massi(11) = 1.0
      massi(12) = 0.0
      massi(13) = 0.0
      massi(14) = 0.5
      massi(15) = 1.0
      massi(16) = 1.5
      massi(17) = 2.0
      massi(18) = 2.5
      massi(19) = 2.0
      massi(20) = 1.5
      massi(21) = 1.0
      massi(22) = 0.5
      massi(23) = 0.0
      massi(24) = 0.0
      massi(25) = 0.0
      massi(26) = 0.0
      massi(27) = 0.0
      massi(28) = 1.0
      massi(29) = 2.0
      massi(30) = 3.0
      massi(31) = 4.0
      massi(32) = 5.0
      endif
!
      if(k.eq.1) then
      dx1=0.1
      dx2=0.9
      dy1=0.1
      dy2=0.9
      vx0=0.0
      vx1=-1.0
      vx2=4.0
      vy1=0.0
      vy2=1.0
      call set(dx1, dx2, dy1, dy2, vx1, vx2, vy1, vy2, 1)
      endif
   
      if(k.eq.2) then
      dx1=0.1
      dx2=0.9
      dy1=0.1
      dy2=0.9
      vx0=260.0
      vx1=260.0
      vx2=310.0
      vy1=0.0
      vy2=1.0
      call set(dx1, dx2, dy1, dy2, vx1, vx2, vy1, vy2, 1)
      endif
 
      if(k.eq.3) then
      dx1=0.1
      dx2=0.9
      dy1=0.1
      dy2=0.9
      vx0=0.0
      vx1=-1.0
      vx2=8.0
      vy1=0.0
      vy2=1.0
      call set(dx1, dx2, dy1, dy2, vx1, vx2, vy1, vy2, 1)
      endif
   
      x1=vx0
      x4=vx0
      do i=1,leni
        x2=massi(i)
        x3=massi(i)
        y1=loci(i)
        y2=loci(i)
        y3=loci(i+1)
        y4=loci(i+1)
        call line(x1,y1,x2,y2)
        call line(x2,y2,x3,y3)
        call line(x3,y3,x4,y4)
        call line(x4,y4,x1,y1)
      enddo
!
      dx = 1./leno
      do i=1,leno
        loco(i) = (i-1)*dx
        loco(i) = loco(i)+0.1*sin(loco(i)*3.14159)
        print *,' i=',i,' loci=',loci(i),' loco=',loco(i)
      enddo
      loco(leno+1)=loci(leni+1)
!
! ----------------------------
! estimate values at interface
! ----------------------------
! compute monotonic element
      massi(0)=2.*massi(1)-massi(2)
      k=leni
      massi(k+1)=2.*massi(k)-massi(k-1)
      do i=1,leni
        dqi = 0.25*(massi(i+1)-massi(i-1))
        dqimax = max(massi(i-1),massi(i),massi(i+1)) - massi(i)
        dqimin = massi(i) - min(massi(i-1),massi(i),massi(i+1))
        dqmono(i) = sign( min( abs(dqimin), dqimin, dqimax ), dqi)
      enddo
! compute value at interface
      do i=2,leni
        vali(i)=0.5*(massi(i-1)+massi(i))+(dqmono(i-1)-dqmono(i))/3.0
      enddo
      vali(1)=0.5*(massi(1)+massi(0))
      k=leni
      vali(k+1)=0.5*(massi(k)+massi(k+1))
! adjust value at interface --- equal distance grid
!     do i=1,leni
!       vali(i)=massi(i)-sign(min(abs(2*dqmono(i)),
!    &                            abs(vali(i)-massi(i))),dqmono(i))
!     enddo
!     k=leni
!     vali(k+1)=massi(k)+sign(min(abs(2*dqmono(k)),
!    &                            abs(vali(k+1)-massi(k))),dqmono(k))
! adjust value at interface --- wave-resolution scheme 
!     do i=1,leni-2
!       qilc = massi(i)+3./2.*(dqmono(i+2)-dqmono(i))-dqmono(i)
!       qimp = massi(i)-2.*dqmono(i)
!       qmax = max(massi(i),qimp,qilc)
!       qmin = min(massi(i),qimp,qilc)
!       vali(i) = min(max(vali(i),qmin),qmax)
!     enddo
!     do i=leni-2,leni
!       qilc = massi(i)+3./2.*(dqmono(i)-dqmono(i-2))+dqmono(i)
!       qimp = massi(i)+2.*dqmono(i)
!       qmax = max(massi(i),qimp,qilc)
!       qmin = min(massi(i),qimp,qilc)
!       vali(i+1) = min(max(vali(i+1),qmin),qmax)
!     enddo
! --------------------------
! compute slope at interface
! --------------------------
      do i=1,leni
        hh(i)=loci(i+1)-loci(i)
      enddo
      do i=2,leni
        alpha=1./hh(i)+1./hh(i-1)
        hhp2 = hh(i)**2
        hhm2 = hh(i-1)**2
        slpi(i) = 4.*(massi(i)/hhp2-massi(i-1)/hhm2)
     &           - (vali(i+1)+3.*vali(i))/hhp2 
     &           + (vali(i-1)+3.*vali(i))/hhm2
        slpi(i) = slpi(i) / alpha
      enddo
      slpi(1)=slpi(2)+12.*massi(1)/hh(1)-6.*(vali(1)+vali(2))/hh(1)
      k=leni
      slpi(k+1)=slpi(k)-12.*massi(k)/hh(k)+6.*(vali(k)+vali(k+1))/hh(k)
!
!     call cubic_hermite_prep(leni+1,loci,vali,slpi,1)
!
! check consistency for mass conservation
!
      masssum=0.0
      chk0sum=0.0
      do i=1,leni
        chk0=0.5*(vali(i)+vali(i+1))+(slpi(i)-slpi(i+1))/12.*hh(i)
        print *,' i=',i,' massi=',massi(i),' mass=',chk0
        masssum=masssum+massi(i)
        chk0sum=chk0sum+chk0
      enddo
      print *,' total sum  massi=',masssum,' chk0=',chk0sum
! adjust monotone
!     do i=1,leni
!       if( vali(i).eq.vali(i+1) ) then
!         slpi(i)=0.0
!         slpi(i+1)=0.0
!       endif
!     enddo
!     do i=1,leni
!       if( vali(i).ne.vali(i+1) ) then
!         dqi=vali(i+1)-vali(i)
!         alpha=slpi(i)/dqi
!         betta=slpi(i+1)/dqi
!         chk0=alpha+betta-2
!         chk1=2*alpha+betta-3
!         chk2=alpha+2.*betta-3.
!         chk3=alpha-chk1*chk1/chk0/3.
!         tf=chk0.gt.0.0.and.chk1.gt.0.0.and.chk2.gt.0.0.and.chk3.lt.0.0
!         if( tf ) then
!           tau=3/sqrt(alpha*alpha+betta*betta)
!           slpi(i)=tau*alpha*dqi
!           slpi(i+1)=tau*betta*dqi
!         endif
!       endif
!     enddo
! ---------------
!
! check further values
      print *,'==========================================='
      write(6,103) i,vali(leni+1)
 103  format('--level=',i2,' vali=',g13.6)
      do i=leni,1,-1
        do k=11,1,-1
          t=(k-1)*0.1
          tt=t*t
          ttt=tt*t
          qq=(2*ttt-3*tt+1)*vali(i)+(ttt-2*tt+t)*hh(i)*slpi(i)+
     &       (-2*ttt+3*tt)*vali(i+1)+(ttt-tt)*hh(i)*slpi(i+1)
          print *,'  qq= ',qq
          xx(k)=qq
          yy(k)=loci(i)+(loci(i+1)-loci(i))*t
        enddo
        call curve(xx,yy,11)
        write(6,103) i,vali(i)
      enddo
      call frame
!
!     do i=1,leni
!       xx(i)=massi(i)
!       yy(i)=0.5*(loci(i)+loci(i+1))
!     enddo
!     call curve(xx,yy,leni)
!     call frame
! test
!     loco(1:leno+1) = loci(1:leno+1)
 
!     call cubic_hermite_intp(leni+1,loci,vali,slpi,leno,loco,valo)
      do k=1,50
      call vert_cell_cubic_intp(loci,massi(1),loco,masso,1,leno,rc)
      print *,' return code from vert_cell_cubic_intp = ',rc
      x1=vx0
      x4=vx0
      do i=1,leno
        x2=masso(i)
        x3=masso(i)
        y1=loco(i)
        y2=loco(i)
        y3=loco(i+1)
        y4=loco(i+1)
        call line(x1,y1,x2,y2)
        call line(x2,y2,x3,y3)
        call line(x3,y3,x4,y4)
        call line(x4,y4,x1,y1)
      enddo
      i=2*k-1
      write(chr,'(i2.2)') i
      y4=loco(20)
      call pwrit(x4,y4,chr,2,2,0,0)
      do i=1,leni
        xx(i)=massi(i)
        yy(i)=0.5*(loci(i)+loci(i+1))
      enddo
      call curve(xx,yy,leni)
      do i=1,leno
        xx(i)=masso(i)
        yy(i)=0.5*(loco(i)+loco(i+1))
      enddo
      call curve(xx,yy,leno)
      call frame
      call vert_cell_cubic_intp(loco,masso,loci,massi(1),1,leno,rc)
      print *,' return code from vert_cell_cubic_intp = ',rc
      x1=vx0
      x4=vx0
      do i=1,leni
        x2=massi(i)
        x3=massi(i)
        y1=loci(i)
        y2=loci(i)
        y3=loci(i+1)
        y4=loci(i+1)
        call line(x1,y1,x2,y2)
        call line(x2,y2,x3,y3)
        call line(x3,y3,x4,y4)
        call line(x4,y4,x1,y1)
      enddo
      i=2*k-1
      write(chr,'(i2.2)') i
      y4=loco(20)
      call pwrit(x4,y4,chr,2,2,0,0)
      do i=1,leni
        xx(i)=massi(i)
        yy(i)=0.5*(loci(i)+loci(i+1))
      enddo
      call curve(xx,yy,leni)
      do i=1,leno
        xx(i)=masso(i)
        yy(i)=0.5*(loco(i)+loco(i+1))
      enddo
      call curve(xx,yy,leno)
      call frame
      enddo
!
      call clsgks
!
      stop
      end

