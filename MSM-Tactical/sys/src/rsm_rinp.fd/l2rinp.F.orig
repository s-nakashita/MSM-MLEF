      subroutine l2rinp(npgb,nrsig,nrsfc,nrslm,igribversion,                 &
     &                  plevels,iqvar)
!$$$  subprogram documentation block
!                .      .    .                                       .
! abstract:  do regional lon-lat grid to regional grid interpolation
!
! program history log:
!
! yunfei zhang 2009
!
!$$$
!....
      use machine , only : kind_io4
      use physcons, pi => con_pi
!ccj
#include <paramodel.h>
#include <rscomloc.h>
!cc
!...
      parameter (nfld=8)
! z t u v rh o3 clwmr terrain
      parameter (nsfcfld=13)
      parameter (imax=cigrd1, jmax=cjgrd1)
      character*8 label(4)
      real plevels(levs)
!
      real(kind=kind_io4) fhours,sis(levs+1),sls(levs)                  & 
     &         ,cgs(clngrd), cgls(clngrd,lsoil)                         &
     &         ,cg2s(clngrd,2), cg4s(clngrd,4)                          &
     &         ,rgs(lngrd),  rgls(lngrd,lsoil)                          &
     &         ,rg2s(lngrd,2),  rg4s(lngrd,4)
!
      real, allocatable :: slg(:)
      real, allocatable ::  cg(:)  , cgl(:,:)
      real, allocatable :: cg2(:,:), cg4(:,:)
      real, allocatable :: blat(:),blon(:)
!
      real, allocatable :: cgsea(:),cgland(:),rr(:)
      integer, allocatable :: iwork(:),idate(:)
      real, allocatable :: sl(:),si(:)
      real, allocatable :: flat(:),flon(:)
      real, allocatable :: cm2(:)
      real, allocatable :: fm2(:),fm2x(:),fm2y(:)
      real, allocatable :: dflat(:),dflon(:)
!
      real, allocatable :: gz(:), q(:)
      real, allocatable :: te(:,:), rq(:,:,:)
      real, allocatable :: uu(:,:), vv(:,:)
#ifdef NONHYD
      real, allocatable :: pp(:,:), tt(:,:)
      real, allocatable :: ww(:,:)
#endif
      real, allocatable :: rain(:),cvrn(:)
      real, allocatable :: rcsln(:),rsnln(:)
!....
      real, allocatable :: tsea  (:), smc   (:,:)
      real, allocatable :: sheleg(:), stc   (:,:)
      real, allocatable :: tg3   (:), vfrac (:)
      real, allocatable :: zorl  (:), slmsk (:)
      real, allocatable :: cv    (:), cvb   (:)
      real, allocatable :: cvt   (:)
      real, allocatable :: f10m  (:), canopy(:)
      real, allocatable :: vtype (:)
      real, allocatable :: stype (:), uustar(:)
      real, allocatable :: ffmm  (:),   ffhh(:)
      real, allocatable :: alvsf (:),  alvwf(:)
      real, allocatable :: alnsf (:),  alnwf(:)
      real, allocatable :: facsf (:),  facwf(:)
      real, allocatable :: slmk(:),simk(:)
      real, allocatable :: tg3clm(:),zorclm(:)
      real, allocatable :: albclm(:,:),vegclm(:)
      real, allocatable :: vetclm(:),sotclm(:),alfclm(:,:)
      real, allocatable :: cfld(:,:,:)
      real, allocatable :: csfcfld(:,:)
      real, allocatable :: fliptemp(:)
      real, allocatable :: spfh(:,:)
!
      integer version,iqvar
      data version/199802/
      character*500 fntg3c,fnzorc,fnalbc,fnvegc,fnvetc,fnsotc,fnmskh
      namelist/namclim/iclim,fntg3c,fnzorc,fnalbc,fnvegc,fnvetc,fnsotc, &
     &                 fnmskh
      common /hydrid/ siin3d(lngrd,levs+1),slin3d(lngrd,levs)
      common /llgz/ terr(lngrd)
      data fntg3c/'global_tg3clim.2.6x1.5.grb'/
      data fnmskh/'global_slmask.t126.grb'/
      data fnalbc/'global_albedo4.1x1.grb'/
      data fnsotc/'global_soiltype.1x1.grb'/
      data fnvegc/'global_vegfrac.1x1.grb'/
      data fnvetc/'global_vegtype.1x1.grb'/
      data fnzorc/'global_zorclim.1x1.grb'/
      character*500 fngrib
      data fngrib/'input.grib'/
      integer ilatflip
      data ilatflip/0/
!
      print *,' enter l2rinp '
!
      allocate ( slg(clngrd) )
      allocate (  cg(clngrd)  , cgl(clngrd,lsoil) )
      allocate ( cg2(clngrd,2), cg4(clngrd,4) )
      allocate ( blat(clngrd) ,blon(clngrd) )
!
      allocate ( cgsea(clngrd),cgland(clngrd) )
      allocate ( iwork(clngrd) )
      allocate ( idate(4),sl(levs),si(levs+1) )
      allocate ( flat(lngrd),flon(lngrd) )
      allocate ( cm2(lngrd) )
      allocate ( fm2(lngrd),fm2x(lngrd),fm2y(lngrd) )
      allocate ( dflat(lngrd),dflon(lngrd) )
!
      allocate ( gz(lngrd), q(lngrd) )
      allocate ( te(lngrd,levs), rq(lngrd,levs,ntotal) )
      allocate ( uu(lngrd,levs), vv(lngrd,levs) )
#ifdef NONHYD
      allocate ( pp(lngrd,levs), tt(lngrd,levs) )
      allocate ( ww(lngrd,levs+1) )
#endif
      allocate ( rain(lngrd),cvrn(lngrd) )
      allocate ( rcsln(lngrd),rsnln(lngrd) )
!....
      allocate ( rr    (lngrd) )
      allocate ( tsea  (lngrd), smc   (lngrd,lsoil) )
      allocate ( sheleg(lngrd), stc   (lngrd,lsoil) )
      allocate ( tg3   (lngrd), vfrac (lngrd) )
      allocate ( zorl  (lngrd), slmsk (lngrd) )
      allocate ( cv    (lngrd), cvb   (lngrd) )
      allocate ( cvt   (lngrd) )
      allocate ( f10m  (lngrd), canopy(lngrd) )
      allocate ( vtype (lngrd) )
      allocate ( stype (lngrd), uustar(lngrd) )
      allocate ( ffmm  (lngrd),   ffhh(lngrd) )
      allocate ( alvsf (lngrd),  alvwf(lngrd) )
      allocate ( alnsf (lngrd),  alnwf(lngrd) )
      allocate ( facsf (lngrd),  facwf(lngrd) )
      allocate ( slmk(lngrd),simk(lngrd) )
      allocate ( tg3clm(lngrd),zorclm(lngrd) )
      allocate ( albclm(lngrd,4),vegclm(lngrd) )
      allocate ( vetclm(lngrd),sotclm(lngrd),alfclm(lngrd,2) )
      allocate ( cfld(clngrd,levs,nfld) )
      allocate ( csfcfld(clngrd,nsfcfld) )
      allocate ( fliptemp(clngrd) )
      allocate ( spfh(clngrd,levs) )
!
!.................................................................
! define regional grid
      call setlatlon(flat,flon,delx,dely,dlamda0)
      call maxmin(flat,lngrd,1,1,1,' flat ')
      call maxmin(flon,lngrd,1,1,1,' flon ')
!
      close(npgb)
      call baopenr(npgb,fngrib(1:10),iret)
      if (iret .ne. 0) then
        write(6,*) ' error in opening file ',fngrib(1:50)
        print *,'error in opening file ',fngrib(1:50)
        call abort
      endif
      if (igribversion.eq.1) then
         call preadg1(npgb,clngrd,levs,plevels,iqvar,nfld,cfld,fhour                &
     &                ,idate,ilatflip)
      else if (igribversion.eq.2) then
         call preadg2(npgb,clngrd,levs,plevels,iqvar,nfld,cfld,fhour                &
     &                ,idate,ilatflip)
      else
         print *,'no support grib version'
      endif
      if (ilatflip.eq.1) then
         do n=1,nfld
         do k=1,levs
            fliptemp=cfld(:,k,n)
            do i=1,imax
            do j=1,jmax
               ijindex1=(j-1)*imax+i
               ijindex2=(jmax-j)*imax+i
               cfld(ijindex1,k,n)=fliptemp(ijindex2)
            enddo
            enddo
         enddo
         enddo
      endif
      call setcgrid(blat,blon)

! .....................................................
! define coarse regional to regional grid interpolation
      call r2rini(blat,blon,flat,flon)
      call rtorini(blat,blon,flat,flon)
! ................................................
! define regional map factors
      rad = pi / 180.0
      hfpi= 0.5 * pi
      truth = rtruth
      nproj = rproj
      if( nproj.eq.1 .or. nproj.eq.-1 ) then
        orient = rorient
        dlamda0 = orient * rad + hfpi
        a2 = ( 1.0 + sin( nproj * truth * rad ) )
        do n=1,lngrd
          fm2(n)=(1.+sin( nproj * flat(n) ))/a2  ! 1/(map factor)
          rgln = flon(n) - dlamda0
          rgln = nproj * rgln
          rcsln(n) = nproj * cos( rgln ) 
          rsnln(n) = nproj * sin( rgln )
        enddo
      else if( nproj.eq.0 ) then
        a2 = cos( truth * rad )
        do n=1,lngrd
          fm2(n)=cos( flat(n) )/a2               ! 1/(map factor)
          rcsln(n) =  0.0
          rsnln(n) = -1.0 
        enddo
      endif
!
      call todxdy(fm2,fm2x,fm2y,igrd1,jgrd1,rdelx,rdely)
!
      do ij=1,lngrd
      fm2(ij) = 1.0/ ( fm2(ij) * fm2(ij) )
      fm2x(ij) = -2.0 * fm2(ij)**1.5 * fm2x(ij)
      fm2y(ij) = -2.0 * fm2(ij)**1.5 * fm2y(ij)
      enddo
      call maxmin(fm2,lngrd,1,1,1,'fm2')
      call maxmin(fm2x,lngrd,1,1,1,'fm2x')
      call maxmin(fm2y,lngrd,1,1,1,'fm2y')
!    
!....................................................
!     iunit=10
! do sig file or not
      if( nrsig.ne.0 ) then
! ....................................................
        rewind nrsig
        label(1)='GFS GRIB'
        write(6,*) label
        do k=1,levs
          sl(k)=plevels(k)/plevels(1)
        enddo
        si(1)=1.0
        si(levs+1)=0.0
        do k=2,levs
          si(k)=(sl(k-1)+sl(k))/2.0
        enddo
! use siin3d & slin3d to transfer si & sl
        do i=1,lngrd
              siin3d(i,:)=si
              slin3d(i,:)=sl
        enddo
!
! interpolate real terrain for rchgr modify boundary mountain.
        cg=cfld(:,1,8)
        if (abs(rproj).eq.1) then
        call cg2rg(cg,terr,1)
        else
        call cgtorg(cg,terr,1)
        endif
!
        write(6,210) (idate(i),i=1,4),fhour,                             &
     &            (si(k),k=1,levs+1),(sl(k),k=1,levs)
210     format(5x,' input date and fcst hour ',4i5,f7.1/(2x,g13.6))
! gz
        cg=cfld(:,1,1)
        if (abs(rproj).eq.1) then
        call cg2rg(cg,gz,1)
        else
        call cgtorg(cg,gz,1)
        endif
! q
        cg=log(plevels(1)/10.0)
        if (abs(rproj).eq.1) then
        call cg2rg(cg,q,1)
        else
        call cgtorg(cg,q,1)
        endif
! te
        do k=1,levs
          cg=cfld(:,k,2)
          if (abs(rproj).eq.1) then
          call cg2rg(cg,te(1,k),1)
          else
          call cgtorg(cg,te(1,k),1)
          endif
        enddo
! uu vv
        do k=1,levs
          cg=cfld(:,k,3)
          if (abs(rproj).eq.1) then
          call cg2rg(cg,uu(1,k),1)
          else
          call cgtorg(cg,uu(1,k),1)
          endif
          cg=cfld(:,k,4)
          if (abs(rproj).eq.1) then
          call cg2rg(cg,vv(1,k),1)
          else
          call cgtorg(cg,vv(1,k),1)
          endif
        enddo
! rq
        if (iqvar.eq.2) then
          do i=1,clngrd
          call getspfh(levs,plevels*100.0,cfld(i,:,5),                  &
     &                 cfld(i,:,2),spfh(i,:))
          enddo
        endif
        do k=1,levs
          if (iqvar.eq.1) then
            cg=cfld(:,k,5)
          else
            cg=spfh(:,k)
          endif
          if (abs(rproj).eq.1) then
          call cg2rg(cg,rq(1,k,1),1)
          else
          call cgtorg(cg,rq(1,k,1),1)
          endif
        enddo
!
! convert temperature to virtual temperature
!
        do k=1,levs
        do i=1,lngrd
           te(i,k)=(1.+0.61*rq(i,k,1))*te(i,k)
        enddo
        enddo
!ccj
       if(ntoz.eq.1) then
         do ntt = 1,ntoz
           ktrace = 1+ntt
           do k=1,levs
             cg=cfld(:,k,6)
             if (abs(rproj).eq.1) then
             call cg2rg(cg,rq(1,k,ktrace),1)
             else
             call cgtorg(cg,rq(1,k,ktrace),1)
             endif
           enddo
         enddo
       endif
!
       if(ncldb.ge.1) then
         do nc = 1,ncldb
           kcloud = 1+ntoz+nc
           do k=1,levs
             cg=cfld(:,k,7)
             if (abs(rproj).eq.1) then
             call cg2rg(cg,rq(1,k,kcloud),1)
             else
             call cgtorg(cg,rq(1,k,kcloud),1)
             endif
           enddo
         enddo
       endif
!
       if(ncldb.eq.0.and.ncld.ge.1) then
         do kc = 1,ncld
           kcloud = 1+ntoz+kc
           do k=1,levs
           do i=1,clngrd
             rq(i,k,kcloud)=0.
           enddo
           enddo
         enddo
       endif
!cc
!.................................................................
! define cgrid project transformation for u and v
      corient=(clon2-clon1)/2.0
      ctruth=(clat2-clat1)/2.0
      truth=ctruth
      nproj = cproj
      orient = corient
      dlamda0 = orient * rad + hfpi
        do n=1,lngrd
          if( nproj.eq.1 .or. nproj.eq.-1 ) then
            a2 = ( 1.0 + sin( nproj * truth * rad ) )
            cm2(n)=(1.+sin( nproj * flat(n) ))/a2  ! 1/(map factor)
            call ll2xy(flat(n),flon(n),x,y)
            call xy2ll(x,y,clat,clon)
            rgln = clon - dlamda0
            rgln = nproj * rgln
            csll = nproj * cos( rgln )
            snll = nproj * sin( rgln )
          else if( nproj.eq.0 ) then
            a2 = cos( truth * rad )
            cm2(n)=cos( flat(n) )/a2               ! 1/(map factor)
            csll =  0.0
            snll = -1.0 
          else if (nproj.eq.4) then
            cm2(n)=1
            csll = 0.0
            snll = -1.0
          endif
          csmm = rcsln(n)
          snmm = rsnln(n)
          cmorm = sqrt( cm2(n) / fm2(n) )
          rcsln(n) = ( csll * csmm + snll * snmm ) * cmorm
          rsnln(n) = ( csll * snmm - snll * csmm ) * cmorm
        enddo

!
! rotate u v to new projection
        
        do k=1,levs
          do n=1,lngrd
            hold = uu(n,k)
            uu(n,k) = hold * rcsln(n) - vv(n,k) * rsnln(n)
            vv(n,k) = hold * rsnln(n) + vv(n,k) * rcsln(n)
          enddo
        enddo
!
        call maxmin(gz,lngrd,1,1,1,'gz full')
        call maxmin( q,lngrd,1,1,1,' q full')
        call maxmin(te,lngrd,levs,1,levs,'te full')
        call maxmin(rq(1,1,1),lngrd,levs,1,levs,'rq full')
        if(ntoz.eq.1)                                                    &         
     &   call maxmin(rq(1,1,2),lngrd,levs,1,levs,'ozone full')
        if(ncld.eq.1)                                                    &
     &   call maxmin(rq(1,1,3),lngrd,levs,1,levs,'cloud water full')
        call maxmin(uu,lngrd,levs,1,levs,'uu full')
        call maxmin(vv,lngrd,levs,1,levs,'vv full')
#ifdef NONHYD
        call maxmin(pp,lngrd,levs,1,levs,'pp full')
        call maxmin(tt,lngrd,levs,1,levs,'tt full')
        call maxmin(ww,lngrd,levs+1,1,levs+1,'ww full')
#endif
        call maxmin(fm2,lngrd,1,1,1,'fm2 full')
        call maxmin(fm2x,lngrd,1,1,1,'fm2x full')
        call maxmin(fm2y,lngrd,1,1,1,'fm2y full')
        call maxmin(flat,lngrd,1,1,1,'flat full')
        call maxmin(flon,lngrd,1,1,1,'flon full')
!
7777    print *,' === write regional data at ',fhour
!
! ...............................................
!
        call rwrite(nrsig,label,fhour,idate,levs,                        &          
     &             flat,flon,fm2,fm2x,fm2y,                              &
     &             sl,si,gz,q,te,uu,vv,rq                                &
#ifdef NONHYD
     &                          ,pp,tt,ww                                &
#endif
     &                                   )
!......................................................
        print *,' end of sig file interpolation. '
!
      endif
! ==============================================================
!.............................................................
! do sfc or not
      if( nrsfc.ne.0 ) then
!
!
      close(npgb)
      call baopenr(npgb,fngrib,iret)
      if (iret .ne. 0) then
        write(6,*) ' error in opening file ',fngrib(1:50)
        print *,'error in opening file ',fngrib(1:50)
        call abort
      endif
      if (igribversion.eq.1) then
         call preadg1sfc(npgb,clngrd,nsfcfld,csfcfld)
      else if (igribversion.eq.2) then
         call preadg2sfc(npgb,clngrd,nsfcfld,csfcfld)
      else
         print *,'no support grib version'
      endif
      if (ilatflip.eq.1) then
         do n=1,nsfcfld
            fliptemp=csfcfld(:,n)
            do i=1,imax
            do j=1,jmax
               ijindex1=(j-1)*imax+i
               ijindex2=(jmax-j)*imax+i
               csfcfld(ijindex1,n)=fliptemp(ijindex2)
            enddo
            enddo
         enddo
      endif
!
      cg=csfcfld(:,6)            ! sheleg
      call cg2rg(cg,sheleg,1)
      cg=csfcfld(:,13)           ! ice mask
! get sea and ice index
      call cg2rg(cg,simk,1)
      do 20 i=1,lngrd
        if( simk(i) .gt. 0.4 ) then
          simk(i) = 2.0
        else
          simk(i) = 0.0
        endif
 20   continue
! get sea and land index
      cg=csfcfld(:,12)           ! land mask
      call cg2rg(cg,slmk,1)
      do 40 i=1,lngrd
        if( slmk(i) .gt. 0.4 ) then
          slmk(i) = 1.0
        else
          slmk(i) = 0.0
        endif
 40   continue
!     do 45 i=1,lngrd
!        slmsk(i) = max( simk(i), slmk(i) )
!  45 continue
!
! get regional land-sea mask
        read(nrslm) rgs  
        call sgl2ful(rgs,slmsk,lngrd)
        rewind nrslm
! before add sea ice info
! read climatology data
      read(5,namclim)
      if (iclim.eq.1) then
        dflat=flat*180/pi
        dflon=flon*180/pi
        call clima(idate(4),idate(2),idate(3),idate(1),fhour,             &
     &             lngrd,lsoil, slmsk,dflat,dflon,                        &
     &             fntg3c,fnzorc,fnalbc,fnvegc,fnvetc,fnsotc,fnmskh,      &
     &             tg3clm,zorclm,albclm,vegclm,vetclm,sotclm,alfclm)
      else
        write(6,*) 'Error: iclim should be 1 if pgb input'
        call abort
      endif
!
      do 45 i=1,lngrd
! add sea ice info
        slmsk(i) = max(slmsk(i),simk(i))
 45   continue
!
! update climate var sea ice info
      if (iclim.eq.1) then
        do i=1,lngrd
          if (slmsk(i).eq.2.0) then
            vetclm(i)=13.0
            sotclm(i)=9.0
            zorclm(i)=1.0
          endif
        enddo
      endif

!
      slg=csfcfld(:,12)
!
!------ read from gsm, interpolate to rsm, and save to nrsfc -----
        rewind nrsfc
! label --- 1
        write(nrsfc) label
! hour idate --- 2
        fhours=fhour
        write(nrsfc) fhours,idate,igrd1,jgrd1,version
! tsea 3
        cg=csfcfld(:,1)
!       call cg2rg(cg,tsea,1)
        call expnd(cg,slg,0,cgsea,iwork,imax,jmax)
        call expnd(cg,slg,1,cgland,iwork,imax,jmax)
        call cg2rg(cgsea,tsea,1)
        call cg2rg(cgland,rr,1)
        do i=1,lngrd
          if (slmsk(i).eq.1.0) tsea(i)=rr(i)
        enddo
        do 50 i=1,lngrd
          if( slmsk(i) .eq. 2.0e0 ) then
            tsea(i)= min( tsea(i), 271.20e0 )
          else if( slmsk(i).eq.0.0e0 ) then
            tsea(i)= max( tsea(i), 271.21e0 )
          else if( slmsk(i).eq.1.0e0 .and.                               &   
     &         sheleg(i).gt.0.0e0 ) then
            tsea(i)= min( tsea(i), 273.16e0 )
          endif
 50     continue
        call maxmin(  tsea,lngrd,1,1,1,'tsea')
        call ful2sgl( tsea,rgs,lngrd)
        write(nrsfc)  rgs
! soil moisture ----- 4
        cgl(:,1)=csfcfld(:,2)
        cgl(:,2)=csfcfld(:,4)
!       call cg2rg(cgl,smc,lsoil)
        do k=1,lsoil
          call expnd(cgl(:,k),slg,0,cgsea,iwork,imax,jmax)
          call expnd(cgl(:,k),slg,1,cgland,iwork,imax,jmax)
          call cg2rg(cgsea,smc(1,k),1)
          call cg2rg(cgland,rr,1)
          do i=1,lngrd
            if (slmsk(i).eq.1.0) then
               smc(i,k)=rr(i)
            else
               smc(i,k)=0.0
            endif
          enddo
        enddo
        call maxmin(   smc,lngrd,lsoil,1,lsoil,'smc')
        call ful2sgl(  smc,rgls,lngrd*lsoil)
        write(nrsfc)   rgls
! snow depth ----- 5
        cg=csfcfld(:,6)
!       call cg2rg(cg,sheleg,1)
        call expnd(cg,slg,0,cgsea,iwork,imax,jmax)
        call expnd(cg,slg,1,cgland,iwork,imax,jmax)
        call cg2rg(cgsea,sheleg,1)
        call cg2rg(cgland,rr,1)
        do i=1,lngrd
          if (slmsk(i).eq.1.0) sheleg(i)=rr(i)
        enddo
        call maxmin(  sheleg,lngrd,1,1,1,'sheleg')
        call ful2sgl( sheleg,rgs,lngrd)
        write(nrsfc)  rgs
! stc ------------ 6
        cgl(:,1)=csfcfld(:,7)
        cgl(:,2)=csfcfld(:,9)
!       call cg2rg(cgl,stc,lsoil)
        do k=1,lsoil
          call expnd(cgl(:,k),slg,0,cgsea,iwork,imax,jmax)
          call expnd(cgl(:,k),slg,1,cgland,iwork,imax,jmax)
          call cg2rg(cgsea,stc(1,k),1)
          call cg2rg(cgland,rr,1)
          do i=1,lngrd
            if (slmsk(i).eq.1.0) then
               stc(i,k)=rr(i)
            else
               stc(i,k)=0.0
            endif
          enddo
        enddo
        call maxmin(   stc,lngrd,lsoil,1,lsoil,'stc')
        call ful2sgl(  stc,rgls,lngrd*lsoil)
        write(nrsfc)   rgls
! tg3 ------------ 7
        if (iclim.eq.1) then
          call ful2sgl( tg3clm,rgs,lngrd)
        endif
        write(nrsfc)  rgs
! roughness ----- 8
        if (iclim.eq.1) then
          call ful2sgl( zorclm,rgs,lngrd)
        endif
        write(nrsfc)  rgs
! cloud amount -- 9
! cloud base --- 10
! cloud top ---- 11
! consistency check among cv cvb and cvt
        do i=1,lngrd
            cv (i)=0.0
            cvt(i)=0.0
            cvb(i)=100.0
        enddo
        call maxmin(  cv, lngrd ,1,1,1,'cv')
        call ful2sgl( cv,rgs, lngrd )
        write(nrsfc)  rgs
        call maxmin(  cvb, lngrd ,1,1,1,'cvb')
        call ful2sgl( cvb,rgs, lngrd )
        write(nrsfc)  rgs
        call maxmin(  cvt, lngrd ,1,1,1,'cvt')
        call ful2sgl( cvt,rgs, lngrd )
        write(nrsfc)  rgs
! four albedoes ------- 12
        if (iclim.eq.1) then
          call ful2sgl( albclm(1,1),rg4s(1,1),lngrd)
          call ful2sgl( albclm(1,2),rg4s(1,2),lngrd)
          call ful2sgl( albclm(1,3),rg4s(1,3),lngrd)
          call ful2sgl( albclm(1,4),rg4s(1,4),lngrd)
        endif
        write(nrsfc)  rg4s
! sea land mask -- 13
        call maxmin(  slmsk,lngrd,1,1,1,'slmsk')
        call ful2sgl( slmsk,rgs,lngrd)
        write(nrsfc)  rgs
! vegitation fraction --14
        if (iclim.eq.1) then
          call ful2sgl( vegclm,rgs,lngrd)
        endif
        write(nrsfc)  rgs
! prepare 15 to end for end of file condition
        do i=1,lngrd
          canopy(i)=0.6
          f10m(i)=0.8
          vtype(i)=1.0
          stype(i)=1.0
          facsf(i)=1.0
          facwf(i)=1.0
          uustar(i) = 1.
          ffmm(i) = log(30.)
          ffhh(i) = log(30.)
        enddo
! vegitation canopy ------ 15
        call ful2sgl( canopy,rgs,lngrd)
        write(nrsfc)  rgs 
!
! f10m -------------- 16
        call ful2sgl( f10m,rgs,lngrd)
        write(nrsfc)  rgs 
!
! vegitation type ---- 17
        if (iclim.eq.1) then
          call ful2sgl( vetclm,rgs,lngrd)
        endif
        write(nrsfc)  rgs
!
! soil type ---------- 18
        if (iclim.eq.1) then
          call ful2sgl( sotclm,rgs,lngrd)
        endif
        write(nrsfc)  rgs
!
! zenith angle dependent factor ---- 19
        if (iclim.eq.1) then
          call ful2sgl( alfclm(1,1),rg2s(1,1),lngrd)
          call ful2sgl( alfclm(1,2),rg2s(1,2),lngrd)
        endif
        write(nrsfc)  rg2s
!
! ustar ------------ 20
        call ful2sgl( uustar,rgs,lngrd)
        write(nrsfc)  rgs
!
! momentum exchange similarity function -- 21
        call ful2sgl( ffmm,rgs,lngrd)
        write(nrsfc)  rgs
!
! heat exchange similarity function -- 22
        call ful2sgl( ffhh,rgs,lngrd)
        write(nrsfc)  rgs
!
        print *,' ****** nornal end of s2rinp ******* '
        return
!
        close(nrsfc)
!
        print *,' +++++ normal exit with some fields specified +++ '
!
      endif
!
      deallocate ( slg )
      deallocate (  cg  , cgl )
      deallocate ( cg2, cg4 )
      deallocate ( blat ,blon )
!
      deallocate ( cgsea,cgland,rr )
      deallocate ( iwork )
      deallocate ( idate,sl,si )
      deallocate ( flat,flon )
      deallocate ( cm2 )
      deallocate ( fm2,fm2x,fm2y )
      deallocate ( dflat,dflon )
!
      deallocate ( gz, q )
      deallocate ( te, rq )
      deallocate ( uu, vv )
#ifdef NONHYD
      deallocate ( pp, tt )
      deallocate ( ww )
#endif
      deallocate ( rain,cvrn )
      deallocate ( rcsln,rsnln )
!....
      deallocate ( tsea  , smc    )
      deallocate ( sheleg, stc    )
      deallocate ( tg3   , vfrac  )
      deallocate ( zorl  , slmsk  )
      deallocate ( cv    , cvb    )
      deallocate ( cvt    )
      deallocate ( f10m  , canopy )
      deallocate ( vtype  )
      deallocate ( stype , uustar )
      deallocate ( ffmm  ,   ffhh )
      deallocate ( alvsf ,  alvwf )
      deallocate ( alnsf ,  alnwf )
      deallocate ( facsf ,  facwf )
      deallocate ( slmk,simk )
      deallocate ( tg3clm,zorclm )
      deallocate ( albclm,vegclm )
      deallocate ( vetclm,sotclm,alfclm )
      deallocate ( cfld )
      deallocate ( csfcfld )
      deallocate ( fliptemp )
      deallocate ( spfh )
    
!
      return
      end
